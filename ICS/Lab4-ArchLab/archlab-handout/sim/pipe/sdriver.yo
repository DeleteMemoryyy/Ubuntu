                      | #######################################################################
                      | # Test for copying block of size 4;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f448030000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f548030000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f004000000 | 	irmovl $4, %eax		# src and dst have 4 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f0f4020000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f0d0020000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | #	Liu DeXin	1500017704@pku.edu.cn
                      | #
                      | # Describe how and why you modified the baseline code.
                      | # Optimizing Strategy:
                      | # 1. reduce the number of cyclies spending on loop:
                      | #	Unfolding the "while" loop.
                      | #	Using the code wirtten by hands instead of loops.
                      | # 2. avoid situations with load/use hazard
                      | #	Do not use value which just fetched from memory.Instead, get two numbers constantly with two available registers.
                      | # 3. avoid spending on branch misprediction
                      | #	Insert two sentences between "andl" and "jle" to keep away from insert bubble when mispredicting the PC address.
                      | # 4. add "iaddl" command
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
  0x046: 6300         | 	xorl %eax,%eax		# count = 0;
                      | 
  0x048: 70f5000000   | 	jmp CL6
  0x04d:              | L6:
  0x04d: 506300000000 | 	mrmovl (%ebx), %esi
  0x053: 507304000000 | 	mrmovl 4(%ebx), %edi	
  0x059: 6266         | 	andl %esi, %esi
  0x05b: 406100000000 | 	rmmovl %esi,(%ecx)
  0x061: 407104000000 | 	rmmovl %edi,4(%ecx)
  0x067: 7172000000   | 	jle L1
  0x06c: c0f001000000 | 	iaddl $1, %eax
  0x072:              | L1:
  0x072: 6277         | 	andl %edi, %edi
  0x074: 506308000000 | 	mrmovl 8(%ebx), %esi
  0x07a: 50730c000000 | 	mrmovl 12(%ebx), %edi
  0x080: 718b000000   | 	jle L2
  0x085: c0f001000000 | 	iaddl $1, %eax
  0x08b:              | L2:
  0x08b: 6266         | 	andl %esi, %esi
  0x08d: 406108000000 | 	rmmovl %esi,8(%ecx)
  0x093: 40710c000000 | 	rmmovl %edi,12(%ecx)
  0x099: 71a4000000   | 	jle L3
  0x09e: c0f001000000 | 	iaddl $1, %eax
  0x0a4:              | L3:	
  0x0a4: 6277         | 	andl %edi, %edi
  0x0a6: 506310000000 | 	mrmovl 16(%ebx), %esi
  0x0ac: 507314000000 | 	mrmovl 20(%ebx), %edi
  0x0b2: 71bd000000   | 	jle L4
  0x0b7: c0f001000000 | 	iaddl $1, %eax
  0x0bd:              | L4:    
  0x0bd: 6266         | 	andl %esi, %esi
  0x0bf: 406110000000 | 	rmmovl %esi,16(%ecx)
  0x0c5: 407114000000 | 	rmmovl %edi,20(%ecx)
  0x0cb: 71d6000000   | 	jle L5
  0x0d0: c0f001000000 | 	iaddl $1, %eax
  0x0d6:              | L5:    
  0x0d6: c0f2faffffff | 	iaddl $-6, %edx
  0x0dc: c0f318000000 | 	iaddl $24, %ebx
  0x0e2: c0f118000000 | 	iaddl $24, %ecx
  0x0e8: 6277         | 	andl %edi, %edi	
  0x0ea: 71f5000000   | 	jle CL6
  0x0ef: c0f001000000 | 	iaddl $1, %eax
                      | 	
  0x0f5:              | CL6:
  0x0f5: 2027         | 	rrmovl %edx, %edi
  0x0f7: c0f7fbffffff | 	iaddl $-5, %edi
  0x0fd: 764d000000   | 	jg L6
                      | 
  0x102: c0f2fbffffff | 	iaddl $-5, %edx
  0x108: 728f010000   | 	jl J4
  0x10d: 506300000000 | 	mrmovl (%ebx), %esi
  0x113: 507304000000 | 	mrmovl 4(%ebx), %edi	
  0x119: 6266         | 	andl %esi, %esi
  0x11b: 406100000000 | 	rmmovl %esi,(%ecx)
  0x121: 407104000000 | 	rmmovl %edi,4(%ecx)
  0x127: 7132010000   | 	jle J51
  0x12c: c0f001000000 | 	iaddl $1, %eax
  0x132:              | J51:
  0x132: 6277         | 	andl %edi, %edi
  0x134: 506308000000 | 	mrmovl 8(%ebx), %esi
  0x13a: 50730c000000 | 	mrmovl 12(%ebx), %edi
  0x140: 714b010000   | 	jle J52
  0x145: c0f001000000 | 	iaddl $1, %eax
  0x14b:              | J52:
  0x14b: 6266         | 	andl %esi, %esi
  0x14d: 406108000000 | 	rmmovl %esi,8(%ecx)
  0x153: 40710c000000 | 	rmmovl %edi,12(%ecx)
  0x159: 7164010000   | 	jle J53
  0x15e: c0f001000000 | 	iaddl $1, %eax
  0x164:              | J53:	
  0x164: 6277         | 	andl %edi, %edi
  0x166: 506310000000 | 	mrmovl 16(%ebx), %esi
  0x16c: 406110000000 | 	rmmovl %esi, 16(%ecx)
  0x172: 717d010000   | 	jle J54
  0x177: c0f001000000 | 	iaddl $1, %eax
  0x17d:              | J54:
  0x17d: 6266         | 	andl %esi, %esi
  0x17f: 71c4020000   | 	jle Done
  0x184: c0f001000000 | 	iaddl $1, %eax
  0x18a: 70c4020000   | 	jmp Done
                      | 
  0x18f:              | J4:
  0x18f: c0f201000000 | 	iaddl $1, %edx
  0x195: 7203020000   | 	jl J3
  0x19a: 506300000000 | 	mrmovl (%ebx), %esi
  0x1a0: 507304000000 | 	mrmovl 4(%ebx), %edi	
  0x1a6: 6266         | 	andl %esi, %esi
  0x1a8: 406100000000 | 	rmmovl %esi,(%ecx)
  0x1ae: 407104000000 | 	rmmovl %edi,4(%ecx)
  0x1b4: 71bf010000   | 	jle J41
  0x1b9: c0f001000000 | 	iaddl $1, %eax
  0x1bf:              | J41:
  0x1bf: 6277         | 	andl %edi, %edi
  0x1c1: 506308000000 | 	mrmovl 8(%ebx), %esi
  0x1c7: 50730c000000 | 	mrmovl 12(%ebx), %edi
  0x1cd: 71d8010000   | 	jle J42
  0x1d2: c0f001000000 | 	iaddl $1, %eax
  0x1d8:              | J42:
  0x1d8: 6266         | 	andl %esi, %esi
  0x1da: 406108000000 | 	rmmovl %esi,8(%ecx)
  0x1e0: 40710c000000 | 	rmmovl %edi,12(%ecx)
  0x1e6: 71f1010000   | 	jle J43
  0x1eb: c0f001000000 | 	iaddl $1, %eax
  0x1f1:              | J43:
  0x1f1: 6277         | 	andl %edi, %edi
  0x1f3: 71c4020000   | 	jle Done
  0x1f8: c0f001000000 | 	iaddl $1, %eax
  0x1fe: 70c4020000   | 	jmp Done
                      | 
  0x203:              | J3:
  0x203: c0f201000000 | 	iaddl $1, %edx
  0x209: 725e020000   | 	jl J2
  0x20e: 506300000000 | 	mrmovl (%ebx), %esi
  0x214: 507304000000 | 	mrmovl 4(%ebx), %edi	
  0x21a: 6266         | 	andl %esi, %esi
  0x21c: 406100000000 | 	rmmovl %esi,(%ecx)
  0x222: 407104000000 | 	rmmovl %edi,4(%ecx)
  0x228: 7133020000   | 	jle J31
  0x22d: c0f001000000 | 	iaddl $1, %eax
  0x233:              | J31:
  0x233: 6277         | 	andl %edi, %edi
  0x235: 506308000000 | 	mrmovl 8(%ebx), %esi
  0x23b: 406108000000 | 	rmmovl %esi, 8(%ecx)
  0x241: 714c020000   | 	jle J32
  0x246: c0f001000000 | 	iaddl $1, %eax
  0x24c:              | J32:
  0x24c: 6266         | 	andl %esi, %esi
  0x24e: 71c4020000   | 	jle Done
  0x253: c0f001000000 | 	iaddl $1, %eax
  0x259: 70c4020000   | 	jmp Done
                      | 
  0x25e:              | J2:
  0x25e: c0f201000000 | 	iaddl $1, %edx
  0x264: 72a0020000   | 	jl J1
  0x269: 506300000000 | 	mrmovl (%ebx), %esi
  0x26f: 507304000000 | 	mrmovl 4(%ebx), %edi	
  0x275: 6266         | 	andl %esi, %esi
  0x277: 406100000000 | 	rmmovl %esi,(%ecx)
  0x27d: 407104000000 | 	rmmovl %edi,4(%ecx)
  0x283: 718e020000   | 	jle J21
  0x288: c0f001000000 | 	iaddl $1, %eax
  0x28e:              | J21:
  0x28e: 6277         | 	andl %edi, %edi
  0x290: 71c4020000   | 	jle Done
  0x295: c0f001000000 | 	iaddl $1, %eax
  0x29b: 70c4020000   | 	jmp Done
                      | 
  0x2a0:              | J1:
  0x2a0: c0f201000000 | 	iaddl $1, %edx
  0x2a6: 72c4020000   | 	jl Done
  0x2ab: 506300000000 | 	mrmovl (%ebx), %esi
  0x2b1: 406100000000 | 	rmmovl %esi, (%ecx)
  0x2b7: 6266         | 	andl %esi, %esi
  0x2b9: 71c4020000   | 	jle Done
  0x2be: c0f001000000 | 	iaddl $1, %eax
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x2c4:              | Done:
  0x2c4: b07f         | 	popl %edi               # Restore callee-save registers
  0x2c6: b03f         | 	popl %ebx
  0x2c8: b06f         | 	popl %esi
  0x2ca: 2054         | 	rrmovl %ebp, %esp
  0x2cc: b05f         | 	popl %ebp
  0x2ce: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x2cf:              | End:
                      | #/* $end ncopy-ys */
  0x2cf:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x2d0:              | 	.align 4
  0x2d0:              | src:
  0x2d0: 01000000     | 	.long 1
  0x2d4: 02000000     | 	.long 2
  0x2d8: fdffffff     | 	.long -3
  0x2dc: fcffffff     | 	.long -4
  0x2e0: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x2f0:              | 	.align 16
  0x2f0:              | Predest:
  0x2f0: fadebc00     | 	.long 0xbcdefa
  0x2f4:              | dest:
  0x2f4: abefcd00     | 	.long 0xcdefab
  0x2f8: abefcd00     | 	.long 0xcdefab
  0x2fc: abefcd00     | 	.long 0xcdefab
  0x300: abefcd00     | 	.long 0xcdefab
  0x304:              | Postdest:
  0x304: bcfade00     | 	.long 0xdefabc
                      | 
  0x308:              | .align 4
                      | # Run time stack
  0x308: 00000000     | 	.long 0
  0x30c: 00000000     | 	.long 0
  0x310: 00000000     | 	.long 0
  0x314: 00000000     | 	.long 0
  0x318: 00000000     | 	.long 0
  0x31c: 00000000     | 	.long 0
  0x320: 00000000     | 	.long 0
  0x324: 00000000     | 	.long 0
  0x328: 00000000     | 	.long 0
  0x32c: 00000000     | 	.long 0
  0x330: 00000000     | 	.long 0
  0x334: 00000000     | 	.long 0
  0x338: 00000000     | 	.long 0
  0x33c: 00000000     | 	.long 0
  0x340: 00000000     | 	.long 0
  0x344: 00000000     | 	.long 0
                      | 
  0x348:              | Stack:

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
#	Liu DeXin	1500017704@pku.edu.cn
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	xorl %eax,%eax		# count = 0;
    jmp CL16
L16:
    mrmovl (%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,(%ecx)
    jne L1
    iaddl $1, %eax
L1:
    mrmovl 4(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,8(%ecx)
    jne L2
    iaddl $1, %eax
L2:
    mrmovl 8(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,8(%ecx)
    jne L3
    iaddl $1, %eax
L3:    
    mrmovl 12(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,12(%ecx)
    jne L4
    iaddl $1, %eax
L5:    
    mrmovl 16(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,16(%ecx)
    jne L6
    iaddl $1, %eax
L6:    
    mrmovl 20(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,20(%ecx)
    jne L7
    iaddl $1, %eax
L7:    
    mrmovl 24(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,24(%ecx)
    jne L8
    iaddl $1, %eax
L8:    
    mrmovl 28(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,28(%ecx)
    jne L9
    iaddl $1, %eax
L9:    
    mrmovl 32(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,32(%ecx)
    jne L10
    iaddl $1, %eax
L10:    
    mrmovl 36(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,36(%ecx)
    jne L11
    iaddl $1, %eax
L11:    
    mrmovl 40(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,40(%ecx)
    jne L12
    iaddl $1, %eax
L12:    
    mrmovl 44(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,44(%ecx)
    jne L13
    iaddl $1, %eax
L13:    
    mrmovl 48(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,48(%ecx)
    jne L14
    iaddl $1, %eax
L14:    
    mrmovl 52(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,52(%ecx)
    jne L15
    iaddl $1, %eax
L15:    
    mrmovl 56(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,56(%ecx)
    jne L16
    iaddl $1, %eax
L16:    
    mrmovl 60(%ebx), %esi
    andl %esi, %esi
    rmmovl %esi,60(%ecx)
    jne CL16
    iaddl $1, %eax
    
CL16:
    rrmovl %edx, %edi
    iaddl $-15, %edi
    jg L16

	# Loop header
	andl %edx,%edx		# len <= 0?
	jle Done		# if so, goto Done:

Loop:	
	iaddl $-1, %edx		# len--	
	mrmovl (%ebx), %esi	# read val from src...
	iaddl $4, %ebx		# src++
	rmmovl %esi, (%ecx)	# ...and store it to dst
	iaddl $4, %ecx		# dst++
	andl %esi, %esi		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddl $1, %eax
Npos:
	andl %edx, %edx		# len > 0?
	jg Loop			# if so, goto Loop:
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

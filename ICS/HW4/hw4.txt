// 刘德欣  1500017704@pku.edu.cn

4.47:
    A：
    // Bubble sort: Pointer version
    void bubble_b(long *data,long count)
    {
        long i,last,t;
        for(last = count - 1; last > 0; last--)
        {
            for(i = 0; i < last; i++)
            {
                if( *(data + i) > *(data + i + 1))
              {
                t = *(data + i + 1);
                *(data + i + 1) = *(data + i);
                *(data + i) = t;
              }
            }
        }
    }

    B:
    bubble_b:
    # data ni %rdi, count in %rsi
        movq    $1, %r8
        movq    $8, %r10
        subq    %r8, %rsi
        andq	%rsi, %rsi
        jle	L11
    L9:
        movl	$0, %r9
        subq	%rsi, %r9
        jge	L13
    L8:
        movq	8(%rdi), %rdx
        movq	(%rdi), %rax
        movq    %rdx, %r11 
        subq    %rax, %r11 
        jl      L10
        movq    %rax, 8(%rdi)   
        movq	%rdx, (%rdi)
    L10:
        addq    %r10, %rdi
        addq    %r8, %r9
        andq	%r9, %r9
        jl	L8
    L13:
        subq    %r8, %rsi
        andq	%rsi, %rsi
        jg	L9
    L11:
        nop
        ret


4.49:
    bubble_b:
    # data ni %rdi, count in %rsi
        pushq   %rbx
        movq    $1, %r8
        movq    $8, %r10
        subq    %r8, %rsi
        andq	%rsi, %rsi
        jle	L11
    L9:
        movl	$0, %r9
        subq	%rsi, %r9
        jge	L13
    L8:
        movq	8(%rdi), %rdx
        movq	(%rdi), %rax
        movq    %rdx, %r11      # long t = *(data + i + 1);
        subq    %rax, %r11      # *(data + i + 1) = *(data + i);
        movq    %rax, 8(%rbx)   
        movq    %rdi, %rbx
        addq    %r10, %rbx
        cmovl   %rdi, %rbx      # if(*(data + i) > *(data + i + 1))
        movq	%rdx, (%rbx)    #   *(data + i + 1) = t;
        addq    %r10, %rdi      # else
        addq    %r8, %r9        #   *(data + i) = t;
        andq	%r9, %r9
        jl	L8
    L13:
        subq    %r8, %rsi
        andq	%rsi, %rsi
        jg	L9
    L11:
        popq    %rbx
        ret


4.52:
    parts which were changed:

    ################ Fetch Stage     ###################################

    bool instr_valid = 
        icode in 
        { INOP, IHALT, IRRMOVL, IIRMOVL, IRMMOVL, IMRMOVL,
            IOPL, IJXX, ICALL, IRET, IPUSHL, IPOPL, ILEAVE, IIADDL };
    # Does fetched instruction require a regid byte?
    bool need_regids =
	    icode in { IRRMOVL, IOPL, IPUSHL, IPOPL, 
		     IIRMOVL, IRMMOVL, IMRMOVL, IIADDL };

    # Does fetched instruction require a constant word?
    bool need_valC =
	icode in { IIRMOVL, IRMMOVL, IMRMOVL, IJXX, ICALL, IIADDL };

    ################ Decode Stage    ###################################

    ## What register should be used as the B source?
    int srcB = [
        icode in { IOPL, IRMMOVL, IMRMOVL, IIADDL  } : rB;
        icode in { IPUSHL, IPOPL, ICALL, IRET } : RESP;
        icode == ILEAVE : REBP;
        1 : RNONE;
    ];

    ## What register should be used as the E destination?
    int dstE = [
        icode in { IRRMOVL } && Cnd : rB;
        icode in { IIRMOVL, IOPL, IIADDL } : rB;
        icode in { IPUSHL, IPOPL, ICALL, IRET, ILEAVE } : RESP;
        1 : RNONE; 
    ];

    ################ Decode Stage    ###################################

        ## What register should be used as the B source?
    int srcB = [
        icode in { IOPL, IRMMOVL, IMRMOVL, IIADDL  } : rB;
        icode in { IPUSHL, IPOPL, ICALL, IRET } : RESP;
        1 : RNONE;
    ];

    ## What register should be used as the E destination?
    int dstE = [
        icode in { IRRMOVL } && Cnd : rB;
        icode in { IIRMOVL, IOPL, IIADDL } : rB;
        icode in { IPUSHL, IPOPL, ICALL, IRET } : RESP;
        1 : RNONE;
    ];

    ################ Execute Stage   ###################################

        ## Select input A to ALU
    int aluA = [
        icode in { IRRMOVL, IOPL } : valA;
        icode in { IIRMOVL, IRMMOVL, IMRMOVL, IIADDL } : valC;
        icode in { ICALL, IPUSHL } : -4;
        icode in { IRET, IPOPL } : 4;
    ];

        ## Select input B to ALU
    int aluB = [
        icode in { IRMMOVL, IMRMOVL, IOPL, ICALL, 
                IPUSHL, IRET, IPOPL, IIADDL } : valB;
        icode in { IRRMOVL, IIRMOVL } : 0;
    ];

        ## Should the condition codes be updated?
    bool set_cc = icode in { IOPL, IIADDL};

